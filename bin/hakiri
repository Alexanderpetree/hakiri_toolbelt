#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'hakiri'
require 'terminal-table'

cli_output = Hakiri::CliOutput.new
http_client = Hakiri::HttpClient.new

program :name, 'hakiri'
program :version, Hakiri::VERSION
program :description, 'Hakiri CLI'

command 'system:scan' do |c|
  c.syntax = 'hakiri system:scan [options]'
  c.summary = 'Configure your stack with a JSON file.'
  c.description = 'This command grabs your custom stack JSON file and shows vulnerabilities in your project.'
  c.option '--stack STRING', String, 'Path to your JSON file'

  c.action do |args, options|
    options.default stack: './technologies.json'

    cli = Hakiri::SystemScan.new(args, options)
    cli.command
  end
end

command 'system:sync' do |c|
  c.syntax = 'hakiri system:sync [options]'
  c.summary = 'Sync your system\'s software versions with the server.'
  c.description = 'This command grabs your custom stack JSON file, and syncs it with your project on www.hakiriup.com.'
  c.option '--stack STRING', String, 'Path to your JSON file stack'
  c.option '--project INTEGER', Integer, 'Your project ID.'

  c.action do |args, options|
    options.default stack: './technologies.json'
    options.default project: nil

    cli = Hakiri::SystemSync.new(args, options)
    cli.command
  end
end

command 'system:steps' do |c|
  c.syntax = 'hakiri system:steps [options]'
  c.summary = 'Configure your stack in the simple walkthrough.'
  c.description = 'This command launches a step by step walkthrough that will help you customize your stack.'

  c.action do |args, options|
    cli = Hakiri::SystemSteps.new(args, options)
    cli.command
  end
end