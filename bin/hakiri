#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'hakiri'
require 'terminal-table'

cli_output = Hakiri::CliOutput.new
http_client = Hakiri::HttpClient.new

program :name, 'hakiri'
program :version, Hakiri::VERSION
program :description, 'Hakiri CLI'

command 'system:scan' do |c|
  c.syntax = 'hakiri system:scan [options]'
  c.summary = 'Configure your stack with a JSON file.'
  c.description = 'This command grabs your custom stack JSON file and shows vulnerabilities in your project.'
  c.option '--stack STRING', String, 'Path to your JSON file'

  c.action do |args, options|
    options.default stack: './technologies.json'

    stack = Hakiri::Stack.new()
    stack.build_from_json_file(options.stack)
    stack.fetch_versions

    # GETTING VERSIONS
    say '-----> Scanning system for software versions...'

    if stack.technologies.empty?
      say '-----> No versions were found...'
    else
      stack.technologies.each do |technology_name, payload|
        say "-----> Found #{technology_name} #{payload[:version]}"
      end

      # GETTING VULNERABILITIES
      say '-----> Searching for vulnerabilities...'
      params = ({ technologies: stack.technologies }.to_param)
      response = http_client.get_issues(params)
      authenticated = response[:meta][:authenticated]

      if response[:technologies].empty?
        say 'No vulnerabilities found, awesome!'
      else
        response[:technologies].each do |technology|
          technology

          unless technology[:issues_count] == 0
            say "-----> Found #{technology[:issues_count].to_i} #{'vulnerability'.pluralize if technology[:issues_count].to_i != 1} in #{technology[:name]} #{technology[:version]}"
            puts ' '
          end
        end

        if authenticated
          if agree 'Show all of them? (yes or no) '
            puts ' '
            response[:technologies].each do |technology|
              technology[:issues].each do |issue|
                say issue[:name]
                say issue[:description]
                puts ' '
              end
            end
          end
        else
          say '****** Signup on www.hakiriup.com and make your command line requests with an auth_token, so you can see issues that your technologies have.'
          say '****** You will also receive notifications via email whenever new issues are found.'
        end
      end
    end
  end
end

command 'system:sync' do |c|
  c.syntax = 'hakiri system:sync [options]'
  c.summary = 'Sync your system\'s software versions with the server.'
  c.description = 'This command grabs your custom stack JSON file, and syncs it with your project on www.hakiriup.com.'
  c.option '--stack STRING', String, 'Path to your JSON file stack'
  c.option '--project INTEGER', Integer, 'Your project ID.'

  c.action do |args, options|
    options.default stack: './technologies.json'
    options.default project: nil

    stack = Hakiri::Stack.new()
    stack.build_from_json_file(options.stack)
    stack.fetch_versions

    if http_client.auth_token
      # GETTING VERSIONS
      say '-----> Scanning system for software versions...'

      if stack.technologies.empty?
        say '-----> No versions were found...'
      else
        stack.technologies.each do |technology_name, payload|
          say "-----> Found #{technology_name} #{payload[:version]}"
        end

        # CHECK VERSIONS ON THE SERVER
        params = ({ project_id: options.project, technologies: stack.technologies }.to_param)
        say '-----> Checking software versions on www.hakiriup.com...'
        response = http_client.check_versions_diff(params)

        if response.has_key? :errors
          response[:errors].each do |error|
            say "!     Error syncing: #{error}"
          end
        else
          if response[:diffs].empty?

          end
          response[:diffs].each do |diff|
            if diff[:hakiri_version]
              say "-----> System version of #{diff[:technology]} is newer (#{diff[:system_version]} > #{diff[:hakiri_version]})"
            else
              say "-----> New technology detected: #{diff[:technology]} #{diff[:system_version]}"
            end
          end

          update = agree "Do you want to update \"#{response[:project][:name]}\" with new versions? (yes or no) "
        end

        # UPDATE VERSIONS ON THE SERVER
      end
    else
      say '!     You have to setup HAKIRI_AUTH_TOKEN environmental variable with your Hakiri authentication token.'
    end
  end
end

command 'system:steps' do |c|
  c.syntax = 'hakiri system:steps [options]'
  c.summary = 'Configure your stack in the simple walkthrough.'
  c.description = 'This command launches a step by step walkthrough that will help you customize your stack.'

  c.action do |args, options|
    say 'Hakiri Walkthrough will help you configure your stack step by step and show '
    say 'you vulnerabilities at the end.'
    puts ' '
    say 'Step 1 of 5: Rails Server'
    say '1. Unicorn'
    say '2. Phusion Passenger'
    say '3. Thin'
    say '4. Trinidad'
    say '5. None of the above'

    server = ask('What do you use as your Rails server? (1, 2, 3, 4 or 5) ', Integer) { |q| q.in = 1..5 }
    puts ' '
    say 'Step 2 of 5: Secondary Server'
    say '1. Apache'
    say '2. nginx'
    say '3. Both'
    say '4. Neither'

    extra_server = ask('Do you use Apache or nginx? (1, 2, 3 or 4) ', Integer) { |q| q.in = 1..4 }
    puts ' '
    say 'Step 3 of 5: Database'
    say '1. MySQL'
    say '2. Postgres'
    say '3. MongoDB'
    say '4. None of the above'

    db = ask('What database do you use? (1, 2, 3 or 4) ', Integer) { |q| q.in = 1..4 }
    puts ' '
    redis = agree 'Step 4 of 5: do you use Redis? (yes or no) '
    puts ' '
    memcached = agree 'Step 5 of 5: do you use Memcached? (yes or no) '

    say '-----> Retrieving software versions versions on your system...'

    stack = Hakiri::Stack.new()
    stack.build_from_input(server, extra_server, db, redis, memcached)
    stack.fetch_versions

    if stack.technologies.empty?
      say '-----> No versions were found...'
    else
      stack.technologies.each do |technology_name, payload|
        say "-----> Found #{technology_name} #{payload[:version]}"
      end
    end
  end
end